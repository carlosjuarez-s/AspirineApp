{"ast":null,"code":"var _jsxFileName = \"D:\\\\Cursos\\\\Global Learning\\\\Proyecto Final\\\\aspirineapp\\\\src\\\\components\\\\Pages\\\\RecordShift\\\\RecordShift.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DatePicker from '@mui/lab/DatePicker';\nimport Stack from '@mui/material/Stack';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport './RecordShift.css';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Button from '@mui/material/Button';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport token from '../../Security/token';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shiftURL = 'http://localhost:8080/api/shift';\nconst doctorURL = 'http://localhost:8080/api/doctor';\n\nconst RecordShift = props => {\n  _s();\n\n  const [value, setValue] = useState(new Date());\n  const [doctorName, setDoctorName] = useState('');\n  const [shift, setShift] = useState([]);\n  const [doctor, setDoctor] = useState([]);\n  const [hour, setHour] = useState('');\n\n  const getDoctor = async () => {\n    await axios.get(doctorURL).then(response => {\n      setDoctor(response.data);\n    }).catch(error => {\n      console.log(error.message);\n    });\n  };\n\n  useEffect(() => {\n    getDoctor();\n  }, []);\n\n  const handleChange = event => {\n    setDoctorName(event.target.value);\n  };\n\n  const getShift = async () => {\n    await axios.get(shiftURL).then(response => {\n      setShift(response.data);\n    });\n  };\n\n  useEffect(() => {\n    getShift();\n  }, []);\n\n  const fullDate = value => {\n    let formatDate = value.getDate() + \"/\" + (value.getMonth() + 1) + \"/\" + value.getFullYear();\n    return formatDate;\n  };\n\n  const handleOnSubmit = async event => {\n    event.preventDefault();\n    const doctorSelected = doctor.filter(element => element.firstName === doctorName);\n    console.log(doctorSelected);\n    const token = JSON.parse(sessionStorage.getItem(\"token\"));\n    console.log(token);\n    let patientName = token.token;\n    await axios.post(shiftURL, {\n      doctor: doctorSelected,\n      hour: hour,\n      date: fullDate(value),\n      taken: false,\n      patient: token.token\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"a\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 12\n  }, this);\n  /* <div>\r\n     <div className='Calendar'>\r\n       <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n         <Stack spacing={3}>\r\n          <DatePicker\r\n           views={['day']}\r\n           label=\"Date\"\r\n           value={value}\r\n          onChange={(e) => {\r\n           setValue(e);\r\n         }}\r\n           renderInput={(params) => <TextField {...params} helperText={null} />}\r\n         />\r\n         </Stack>\r\n       </LocalizationProvider>\r\n     </div>\r\n     \r\n     <div className='Table'>\r\n       <TableContainer component={Paper}>\r\n         <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n           <TableHead>\r\n             <TableRow>\r\n               <TableCell>Names</TableCell>\r\n               <TableCell align=\"right\">Doctor</TableCell>\r\n               <TableCell align=\"right\">Hour</TableCell>\r\n               <TableCell align=\"right\">Date</TableCell>\r\n             </TableRow>\r\n           </TableHead>\r\n         <TableBody>\r\n           {shift.map((element) => (\r\n           <TableRow\r\n             key={element.name}\r\n             sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n           >\r\n             <TableCell component=\"th\" scope=\"row\">{element.patient}</TableCell>\r\n             <TableCell align=\"right\">{element.doctor}</TableCell>\r\n             <TableCell align=\"right\">{element.hour}</TableCell>\r\n             <TableCell align=\"right\">{element.date}</TableCell>\r\n             </TableRow>\r\n           ))}\r\n           </TableBody>\r\n         </Table>\r\n       </TableContainer>\r\n     </div>\r\n       <div className='newTurn'>\r\n     <TextField\r\n       value={hour}\r\n       onChange={e => setHour(e.target.value)}\r\n       id=\"time\"\r\n       label=\"Choose Schedule\"\r\n       type=\"time\"\r\n       defaultValue=\"12:00\"\r\n       InputLabelProps={{\r\n         shrink: true,\r\n       }}\r\n       inputProps={{\r\n         step: 1800, // 5 min\r\n       }}\r\n       sx={{left: 22, width: 130 , mt:3 }}\r\n     />\r\n     <FormControl variant=\"standard\" sx={{ m: 3, minWidth: 130 }}>\r\n       <InputLabel id=\"demo-simple-select-standard-label\">Doctor</InputLabel>\r\n       <Select\r\n         labelId=\"demo-simple-select-standard-label\"\r\n         id=\"demo-simple-select-standard\"\r\n         value={doctorName}\r\n         onChange={handleChange}\r\n         label=\"Age\"\r\n       >\r\n         <MenuItem value=\"\">\r\n           <em>None</em>\r\n         </MenuItem>\r\n         {doctor.map(doctor => <MenuItem value={doctor.firstName}>{doctor.firstName}</MenuItem>)}\r\n  \n       </Select>\r\n     </FormControl>\r\n       <div>\r\n         <Stack  direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}> \r\n           <Button variant=\"contained\" onClick={handleOnSubmit}>Generate Shift</Button>\r\n         </Stack>\r\n       </div>\r\n     </div>\r\n   </div>\r\n  )   */\n};\n\n_s(RecordShift, \"T9qz/So1RH2Uqw8dBUsa9m1nGcM=\");\n\n_c = RecordShift;\nexport default RecordShift;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecordShift\");","map":{"version":3,"sources":["D:/Cursos/Global Learning/Proyecto Final/aspirineapp/src/components/Pages/RecordShift/RecordShift.js"],"names":["React","TextField","AdapterDateFns","LocalizationProvider","DatePicker","Stack","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","InputLabel","MenuItem","FormControl","Select","Button","axios","useState","useEffect","token","shiftURL","doctorURL","RecordShift","props","value","setValue","Date","doctorName","setDoctorName","shift","setShift","doctor","setDoctor","hour","setHour","getDoctor","get","then","response","data","catch","error","console","log","message","handleChange","event","target","getShift","fullDate","formatDate","getDate","getMonth","getFullYear","handleOnSubmit","preventDefault","doctorSelected","filter","element","firstName","JSON","parse","sessionStorage","getItem","patientName","post","date","taken","patient"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,oBAAP,MAAiC,+BAAjC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAO,mBAAP;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,sBAAlB;;AAGA,MAAMC,QAAQ,GAAG,iCAAjB;AACA,MAAMC,SAAS,GAAG,kCAAlB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAIS,IAAJ,EAAD,CAAlC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;;AAGA,QAAMkB,SAAS,GAAG,YAAU;AAC1B,UAAMnB,KAAK,CAACoB,GAAN,CAAUf,SAAV,EACLgB,IADK,CACAC,QAAQ,IAAK;AACjBN,MAAAA,SAAS,CAACM,QAAQ,CAACC,IAAV,CAAT;AACD,KAHK,EAGHC,KAHG,CAGGC,KAAK,IAAG;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD,KALK,CAAN;AAOD,GARD;;AAUA1B,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAKA,QAAMU,YAAY,GAAIC,KAAD,IAAW;AAC9BlB,IAAAA,aAAa,CAACkB,KAAK,CAACC,MAAN,CAAavB,KAAd,CAAb;AACD,GAFD;;AAIA,QAAMwB,QAAQ,GAAG,YAAY;AAC3B,UAAMhC,KAAK,CAACoB,GAAN,CAAUhB,QAAV,EACLiB,IADK,CACAC,QAAQ,IAAI;AAClBR,MAAAA,QAAQ,CAACQ,QAAQ,CAACC,IAAV,CAAR;AACC,KAHK,CAAN;AAIC,GALH;;AAOErB,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;;AAIF,QAAMC,QAAQ,GAAEzB,KAAD,IAAS;AACtB,QAAI0B,UAAU,GAAE1B,KAAK,CAAC2B,OAAN,KAAgB,GAAhB,IAAqB3B,KAAK,CAAC4B,QAAN,KAAiB,CAAtC,IAAyC,GAAzC,GAA8C5B,KAAK,CAAC6B,WAAN,EAA9D;AACA,WAAOH,UAAP;AAED,GAJD;;AAMA,QAAMI,cAAc,GAAG,MAAOR,KAAP,IAAiB;AACtCA,IAAAA,KAAK,CAACS,cAAN;AACA,UAAMC,cAAc,GAAGzB,MAAM,CAAC0B,MAAP,CAAcC,OAAO,IAAIA,OAAO,CAACC,SAAR,KAAsBhC,UAA/C,CAAvB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYa,cAAZ;AACA,UAAMrC,KAAK,GAAGyC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAX,CAAd;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAZ;AACA,QAAI6C,WAAW,GAAG7C,KAAK,CAACA,KAAxB;AAEA,UAAMH,KAAK,CAACiD,IAAN,CAAW7C,QAAX,EAAoB;AACxBW,MAAAA,MAAM,EAAEyB,cADgB;AAExBvB,MAAAA,IAAI,EAAEA,IAFkB;AAGxBiC,MAAAA,IAAI,EAAEjB,QAAQ,CAACzB,KAAD,CAHU;AAIxB2C,MAAAA,KAAK,EAAE,KAJiB;AAKxBC,MAAAA,OAAO,EAAEjD,KAAK,CAACA;AALS,KAApB,CAAN;AAOD,GAfD;;AAiBA,sBAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AACC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC,CApJD;;GAAMG,W;;KAAAA,W;AAsJN,eAAeA,WAAf","sourcesContent":["import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport Stack from '@mui/material/Stack';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport './RecordShift.css'\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport Button from '@mui/material/Button';\r\nimport axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport token from '../../Security/token';\r\n\r\n\r\nconst shiftURL = 'http://localhost:8080/api/shift';\r\nconst doctorURL = 'http://localhost:8080/api/doctor'\r\n\r\nconst RecordShift = (props) => {\r\n  const [value, setValue] = useState(new Date());\r\n  const [doctorName, setDoctorName] = useState('');\r\n  const [shift, setShift] = useState([]);\r\n  const [doctor, setDoctor] = useState([]);\r\n  const [hour, setHour] = useState('');\r\n  \r\n\r\n  const getDoctor = async() =>{\r\n    await axios.get(doctorURL)\r\n    .then(response =>  {\r\n      setDoctor(response.data)\r\n    }).catch(error =>{\r\n      console.log(error.message);\r\n    })\r\n    \r\n  }\r\n \r\n  useEffect(() => {\r\n    getDoctor()\r\n  }, [])\r\n\r\n  \r\n  const handleChange = (event) => {\r\n    setDoctorName(event.target.value);\r\n  }\r\n\r\n  const getShift = async () => {\r\n    await axios.get(shiftURL)\r\n    .then(response => {\r\n    setShift(response.data)\r\n    })\r\n    }\r\n  \r\n    useEffect(() => {\r\n      getShift();\r\n    }, [])\r\n\r\n  const fullDate=(value)=>{\r\n    let formatDate= value.getDate()+\"/\"+(value.getMonth()+1)+\"/\"+ value.getFullYear()\r\n    return formatDate;\r\n\r\n  }\r\n\r\n  const handleOnSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const doctorSelected = doctor.filter(element => element.firstName === doctorName);\r\n    console.log(doctorSelected);\r\n    const token = JSON.parse(sessionStorage.getItem(\"token\"));\r\n    console.log(token)\r\n    let patientName = token.token\r\n    \r\n    await axios.post(shiftURL,{\r\n      doctor: doctorSelected,\r\n      hour: hour,\r\n      date: fullDate(value),\r\n      taken: false,\r\n      patient: token.token\r\n      })\r\n  }\r\n\r\n  return ( <div>a</div> )\r\n   /* <div>\r\n      <div className='Calendar'>\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n          <Stack spacing={3}>\r\n           <DatePicker\r\n            views={['day']}\r\n            label=\"Date\"\r\n            value={value}\r\n           onChange={(e) => {\r\n            setValue(e);\r\n          }}\r\n            renderInput={(params) => <TextField {...params} helperText={null} />}\r\n          />\r\n          </Stack>\r\n        </LocalizationProvider>\r\n      </div>\r\n      \r\n      <div className='Table'>\r\n        <TableContainer component={Paper}>\r\n          <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Names</TableCell>\r\n                <TableCell align=\"right\">Doctor</TableCell>\r\n                <TableCell align=\"right\">Hour</TableCell>\r\n                <TableCell align=\"right\">Date</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n          <TableBody>\r\n            {shift.map((element) => (\r\n            <TableRow\r\n              key={element.name}\r\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\">{element.patient}</TableCell>\r\n              <TableCell align=\"right\">{element.doctor}</TableCell>\r\n              <TableCell align=\"right\">{element.hour}</TableCell>\r\n              <TableCell align=\"right\">{element.date}</TableCell>\r\n\r\n            </TableRow>\r\n            ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n\r\n      <div className='newTurn'>\r\n      <TextField\r\n        value={hour}\r\n        onChange={e => setHour(e.target.value)}\r\n        id=\"time\"\r\n        label=\"Choose Schedule\"\r\n        type=\"time\"\r\n        defaultValue=\"12:00\"\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        inputProps={{\r\n          step: 1800, // 5 min\r\n        }}\r\n        sx={{left: 22, width: 130 , mt:3 }}\r\n      />\r\n      <FormControl variant=\"standard\" sx={{ m: 3, minWidth: 130 }}>\r\n        <InputLabel id=\"demo-simple-select-standard-label\">Doctor</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-standard-label\"\r\n          id=\"demo-simple-select-standard\"\r\n          value={doctorName}\r\n          onChange={handleChange}\r\n          label=\"Age\"\r\n        >\r\n          <MenuItem value=\"\">\r\n            <em>None</em>\r\n          </MenuItem>\r\n          {doctor.map(doctor => <MenuItem value={doctor.firstName}>{doctor.firstName}</MenuItem>)}\r\n  \r\n        </Select>\r\n      </FormControl>\r\n        <div>\r\n          <Stack  direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}> \r\n            <Button variant=\"contained\" onClick={handleOnSubmit}>Generate Shift</Button>\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )   */\r\n}\r\n\r\nexport default RecordShift"]},"metadata":{},"sourceType":"module"}